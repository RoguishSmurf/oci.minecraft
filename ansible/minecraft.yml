---
# ################
# Install Software
# ################
- name: Install Software
  hosts: minecraft#role=minecraft
  vars_files:
    - vars/minecraft_vars.yml 

  tasks:
  - name: Install Packages
    ansible.builtin.package:
      name: "{{ item }}"
      state: latest
    loop: "{{ packages }}"
    become: yes

  - name: Verify JDK Version
    ansible.builtin.command: java --version
    register: java_version
    changed_when: false

  - name: Report JDK Version
    ansible.builtin.debug: 
      var: java_version.stdout_lines[0]

  - name: Create Server Directories
    ansible.builtin.file:
      path: "{{ server_base }}/{{ item }}"
      state: directory
    loop: "{{ server_dirs }}"

  - name: Download Paper
    ansible.builtin.get_url:
      url: "{{ paper_url }}"
      dest: "{{ server_base }}/server/{{ paper_jar }}"
      checksum: "{{ paper_checksum }}"

  - name: Download Velocity
    ansible.builtin.get_url:
      url: "{{ velocity_url }}"
      dest: "{{ server_base }}/proxy/{{ velocity_jar }}"
      checksum: "{{ velocity_checksum }}"

  - name: Download mcrcon
    ansible.builtin.get_url:
      url: "{{ mcrcon_url }}"
      dest: "{{ server_base }}/tools/{{ mcrcon_tarball }}"
      checksum: "{{ mcrcon_checksum }}"

  - name: Extract mcrcon
    ansible.builtin.unarchive:
      src: "{{ server_base }}/tools/{{ mcrcon_tarball }}"
      dest: "{{ server_base }}/tools/"
      remote_src: yes

# ###################
# Configure Minecraft
# ###################
- name: Configure Minecraft
  hosts: minecraft#role=minecraft
  vars_files:
    - vars/minecraft_vars.yml 

  tasks:
  - name: Agree to EULA
    ansible.builtin.template:
      src: templates/eula.txt.j2
      dest:  "{{ server_base }}/server/eula.txt"

  - name: Update server.properties 
    ansible.builtin.template:
      src: config/server.properties.j2
      dest: "{{ server_base }}/server/server.properties"
    notify: restart minecraft

  - name: Create config directory
    ansible.builtin..file:
      path: "{{ server_base }}/server/config"
      state: directory

  - name: Update paper.yml
    ansible.builtin.template:
      src: config/paper-global.yml.j2
      dest: "{{ server_base }}/server/config/paper-global.yml"
    notify: restart minecraft

  - name: Create Proxy Files
    ansible.builtin.command:
      cmd: "echo shutdown | java -jar velocity.jar"
      chdir: "{{ server_base }}/proxy"
      creates: "{{ server_base }}/proxy/velocity.toml"

  - name: Set Proxy Secret
    ansible.builtin.template:
      src: "templates/forwarding.secret.j2"
      dest: "{{ server_base }}/proxy/forwarding.secret"

  - name: Configure Velocity
    ansible.builtin.template:
      src: templates/velocity.toml.j2
      dest: "{{ server_base }}/proxy/velocity.toml"
    notify: restart proxy

  - name: Create systemd Minecraft Unit File
    ansible.builtin.template:
      src: templates/systemd.minecraft.j2
      dest: /etc/systemd/user/minecraft.service
    become: yes
    notify: restart minecraft

  - name: Enable systemd Minecraft Service
    ansible.builtin.service: 
      name: minecraft.service
      scope: user
      enabled: yes
    changed_when: false
    notify: restart minecraft

  - name: Create systemd Proxy Unit File
    ansible.builtin.template:
      src: templates/systemd.proxy.j2
      dest: /etc/systemd/user/proxy.service
    become: yes
    notify: restart proxy

  - name: Enable systemd Proxy Service
    ansible.builtin.service: 
      name: proxy.service
      scope: user
      enabled: yes
    changed_when: false
    notify: restart proxy

  - name: "Enable linger for {{ linux_user }}"
    ansible.builtin.shell:
      cmd: "loginctl enable-linger {{ linux_user }}"
    become: yes

  - name: Open Firewall
    ansible.posix.firewalld:
      port: "{{ proxy_port }}/tcp"
      permanent: true
      state: enabled
      immediate: yes
    become: yes

  handlers:
  - name: restart minecraft
    ansible.builtin.systemd:
      name: minecraft.service
      state: restarted
      scope: user
  - name: restart proxy
    ansible.builtin.systemd:
      name: proxy.service
      state: restarted
      scope: user

# #######
# Backups
# #######
- name: Schedule Backups
  hosts: minecraft#role=minecraft
  vars_files:
    - vars/minecraft_vars.yml 
  tasks:
  - name: Create Backup Script
    ansible.builtin.template:
      src: templates/backup.sh.j2
      dest: "{{ server_base }}/backup/backup.sh"
      mode: '0755'
  - name: Schedule Nightly Backups
    ansible.builtin.cron:
      name: "Backup Minecraft Server"
      minute: "0"
      hour: "23"
      job: "{{ server_base }}/backup/backup.sh"
  - name: Create Console Script
    ansible.builtin.template:
      src: templates/console.sh.j2
      dest: "{{ server_base }}/console.sh"
      mode: '0755'

# #####
# Start
# #####
- name: Start Servers
  hosts: minecraft#role=minecraft
  tasks:
  - name: start minecraft
    ansible.builtin.systemd:
      name: minecraft.service
      state: started
      scope: user
  - name: start proxy
    ansible.builtin.systemd:
      name: proxy.service
      state: started
      scope: user